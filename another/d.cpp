/*

В одном далеком мире, в славном городе Эрбовле открыли новый банк.
В банке есть т сотрудников,работающих с клиентами, и один главный бухгалтер.

Для решения своих проблем в банк приходят гномы. Известно, что i-й гном приходит
в банк через t_i минут после открытия банка. Сначала ему нужно провести a_i минут
у одного из т сотрудников, а потом еще b; минут в офисе главного бухгалтера.

Разумеется, несколько гномов не могут одновременно находиться у одного сотрудника или
в офисе главного бухгалтера, поэтому к сотрудникам и к главному бухгалтеру формируются очереди.

Очередь к сотрудникам общая, при этом гном из очереди идет к первому освободившемуся сотруднику.
Если в банк одновременно приходят два гнома, то первым в очередь к сотрудникам встает тот, чей
номер меньше. Если гном начал обслуживаться у сотрудника в момент х, то он освобождается в момент
x + a_i, в этот момент другой гном может начать обслуживаться у этого же сотрудника. Гном, пришедший
в банк в момент t, может начать обслуживаться у сотрудника в любой момент, начиная с t.

Решив свои проблемы у сотрудника, гном идет в очередь к главному бухгалтеру. Аналогично, если два
гнома приходят в эту очередь одновременно, первым встает гном с меньшим номером, в момент, когда
заканчивается обслуживание одного из гномов, может сразу начаться обслуживание следующего, гном
может попасть к главному бухгалтеру, начиная с того момента, когда закончил обслуживаться у сотрудника.

Сегодня в банк собирается прийти и гномов, про каждого известно: во сколько
он заходит в банк, скольковременион хочет провести у окошка и сколько времени
он хочет провести у бухгалтера. Нужно сообщить время выхода из банка для каждого гнома.


Формат ввода
В первой строке заданы два целых числа n и m (1 ≤ n≤100000, 1≤m≤10) — число гномов и сотрудников, соответственно.
Далее, в n строках задано по три целых числа t_i, a и b (1 < t_i, a_i, b_i ≤ 10^9) — время прихода i-го гнома,
сколько минут i-й гном должен провести у сотрудника банка и сколько минут он должен провести в офисе главного
бухгалтера. Известно, что гномы заданы в порядке прихода в банк, то есть для любой пары i < j выполняется t_i < t_j.

Формат вывода
Выведите n целых чисел, i-е число должно быть равно числу минут после открытия, когда i-й гном покинет банк.

Пример
Ввод

4 2
13 3
1 2 2
221
214

Вывод
8
5
9
13

*/

#include <algorithm>
#include <cstdint>
#include <iostream>

struct termine {
  int num;
  int64_t visit, process;
};

bool compare(const termine &a, const termine &b) { return a.visit < b.visit; }

// time: O(n*log(n))
int main() {
  int64_t n, m, t, a, b;
  std::cin >> n >> m;

  int64_t *employees = new int64_t[m]{}, *free;  // моменты времени, в которых обычный сотрудник свободен.
  termine *termines = new termine[n];            // моменты времени, когда клиент завершил посещение обычного сотрудника.
  int64_t *res = new int64_t[n];                 // моменты времени, когда клиент завершил посещение главного сотрудника.

  for (int i = 0; i < n; ++i) {
    std::cin >> t >> a >> b;

    // Поиск свободного сотрудника или сотрудника, который освободится раньше всех.
    free = employees;
    int j = 1;
    while (t < *free && j < m) {
      if (employees[j] < *free) free = employees + j;
      ++j;
    }

    *free = std::max(*free, t) + a;  // обновление времени освобождения сотрудника.
    termines[i] = {i, *free, b};     // сохранения времени освобождения клиента.
  }

  // Стабильная сортировка по времени посещения главного сотрудника.
  std::stable_sort(termines, termines + n, compare);

  int64_t main_employee = 0;  // момент времени, в котором главный сотрудник освободится.

  // Вычисления времени завершения посещения у главного сортировка.
  for (int i = 0; i < n; ++i) {
    main_employee = std::max(main_employee, termines[i].visit) + termines[i].process;
    res[termines[i].num] = main_employee;
  }

  // Вывод результата.
  for (int i = 0; i < n; ++i) {
    std::cout << res[i] << '\n';
  }

  delete[] termines;
  delete[] employees;
  delete[] res;
  return 0;
}
