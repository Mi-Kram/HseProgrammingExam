/*
Лорд Петир собирает армию для похода на соседнее королевство. Он хочет,
чтобы в его армию вошли все воины каждого из n городов его королевства.
Петир выяснил, что в i-м городе ищут работу a_i воинов, которых он может
завербовать в свою армию.

Исходно в армии Лорда нет ни одного воина. Чтобы воин вошел в армию, Петир
может заплатить этому воину. Для вербовки одного воина из i-го города необходимо
заплатить ему c_i золотых монет. При этом воины из больших городов ценят свою
работу дороже, поэтому если для i-го и j-го города выполнено
a_i < a_j, то c_i ≤ c_j ≤ c_j.

Однако есть еще один способ добиться того, чтобы воины присоединились к армии.
Если в какой-то момент оказывается, что в армии Лорда Петира уже строго больше
воинов, чем осталось в некотором городе, то все воины этого города бесплатно
присоединяются к армии Лорда.

Помогите Лорду Петиру выяснить, какое минимальное количество золотых монет он должен
заплатить воинам, чтобы все воины из всех городов оказались в его армии.

Формат ввода
В первой строке находится целое число n (1≤n≤1000) — количество городов, в которых
Лорд Петир намерен набирать себе воинов. В следующих n строках находится по два
целых числа a_i и c_i (1 ≤ a_i ≤ 100, 1 ≤ c_i ≤ 10000) — количество воинов в i-м городе
и число монет, которое необходимо заплатить одному воину в этом городе, чтобы он
присоединился к армии. Для всех пар i и j выполнено условие, что если
a_i < a_j => c_i ≤ c_j.
​
Формат вывода
В выходной файл выведите одно целое число — минимальное количество монет,
которые Лорду Петиру придется заплатить, чтобы все воины вошли в его армию.

Пример
Ввод
3
1 1
2 2
4 3

Вывод
5

Примечания
В приведенном примере Лорду необходимо действовать следующим образом.
Сначала он платит 2 монеты воину из второго города и 3 монеты воину из
третьего города, чтобы они присоединились к его армии.

Теперь в армии Лорда 2 воина, а в городах осталось 1, 1 и 3 воина, соответственно.
Воины из первого и второго городов бесплатно присоединяются к армии Лорда Петира,
в его армии становится 4 воина, после чего и оставшиеся 3 воина из третьего города
бесплатно присоединяются к его армии.
*/

#include <algorithm>
#include <iostream>

class item {
 public:
  int amount, cost;
};

bool sort_items(item& a, item& b);

// time: O(n*log(n))
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);

  int n;
  std::cin >> n;

  item* arr = new item[n];  // входные данные.
  int accumulation = 0;     // предполагаемая армия лорда.

  for (int i = 0; i < n; ++i) {
    std::cin >> arr[i].amount >> arr[i].cost;
    accumulation += arr[i].amount;
  }

  // Сортировка данных по числу населения.
  std::sort(arr, arr + n, sort_items);
  
  int cost = 0, cnt;
  for (int i = n - 1; i >= 0; --i) {
    accumulation -= arr[i].amount;  // вычитаем из армии число населения текущего города.

    // Если город можно захватить без покупки воинов, ничего не делаем.
    if (arr[i].amount < accumulation) continue;

    cnt = (arr[i].amount - accumulation) / 2 + 1;  // число воинов, которых надо нанять.
    cost += cnt * arr[i].cost;                     // считаем монеты.
    accumulation += cnt;                           // добавляем купленных воинов.
  }
  
  std::cout << cost << '\n';

  delete[] arr;
  return 0;
}

bool sort_items(item& a, item& b) {
  return a.amount < b.amount || (a.amount == b.amount && a.cost < b.cost);
}
